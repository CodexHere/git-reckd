#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Icons
CHECKMARK="✔"
WARNING="⚠"
ARROW_UP="↑"
ARROW_DOWN="↓"

SEARCH_PATH="${1:-.}"

# Arrays to store repository states
declare -a REPOS
declare -a NEEDS_COMMIT
declare -a NEEDS_PUSH
declare -a NEEDS_PULL

# Function to check git repository status
check_git_status() {
    local dir=$1    
    local original_dir
    original_dir=$(pwd)
    cd "$dir" || return

    # Check if it's a git repository
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        cd "$original_dir" || return
        return
    fi

    REPOS+=("$dir")

    # Initialize flags
    local needs_commit=0
    local needs_push=0
    local needs_pull=0

    # Check for uncommitted changes
    if [[ -n $(git status --porcelain) ]]; then
        needs_commit=1
    fi

    # Check for push/pull status
    git fetch origin >/dev/null 2>&1
    local branch
    local remote
    branch=$(git rev-parse --abbrev-ref HEAD)
    remote="origin/$branch"
    
    if git rev-parse "$remote" >/dev/null 2>&1; then
        local ahead
        local behind
        ahead=$(git rev-list --count "$remote"..HEAD)
        behind=$(git rev-list --count HEAD.."$remote")

        if [[ $ahead -gt 0 ]]; then
            needs_push=1
        fi
        if [[ $behind -gt 0 ]]; then
            needs_pull=1
        fi
    fi

    NEEDS_COMMIT+=("$needs_commit")
    NEEDS_PUSH+=("$needs_push")
    NEEDS_PULL+=("$needs_pull")

    cd "$original_dir" || return
}

# Function to find all git repositories and capture the paths
find_repos() {
    # Find all git repositories and return their paths
    local repos=()
    while IFS= read -r gitdir; do
        repos+=("$(dirname "$gitdir")")
    done < <(find "$SEARCH_PATH" -type d -name ".git" -not -path "*/.git/*" 2>/dev/null)

    echo "${repos[@]}"
}

# Function to display repository statuses
display_status() {
    clear
    echo "Git Repository Status"
    echo "===================="
    printf "\n%-53s %s\n" "Repository (${#REPOS[@]})" "Status"
    echo "---------------------------------------------------------------"
    
    local status=""
    local clean=0
    local dirty=0
    local push=0
    local pull=0

    # Display all repositories and their statuses
    for i in "${!REPOS[@]}"; do
        # Build the status dynamically
        if [[ ${NEEDS_COMMIT[$i]} -eq 1 ]]; then
            status="${RED}${WARNING}${NC}"
            dirty=$((dirty + 1))
        else
            status="${GREEN}${CHECKMARK}${NC}"
            clean=$((clean + 1))
        fi

        if [[ ${NEEDS_PUSH[$i]} -eq 1 ]]; then
            status="$status ${YELLOW}${ARROW_UP}${NC}"
            push=$((push + 1))
        fi

        if [[ ${NEEDS_PULL[$i]} -eq 1 ]]; then
            status="$status ${BLUE}${ARROW_DOWN}${NC}"
            pull=$((pull + 1))
        fi

        # Print the repository with its dynamically generated status
        printf "%-3s %-50s %b\n" "$((i + 1))" "${REPOS[$i]}" "$status"
    done

    echo

    printf "%b\n" "${GREEN}${CHECKMARK}${NC} = ($clean) Clean"
    printf "%b\n" "${RED}${WARNING}${NC} = ($dirty) Dirty"
    printf "%b\n" "${YELLOW}${ARROW_UP}${NC} = ($push) Needs Push"
    printf "%b\n" "${BLUE}${ARROW_DOWN}${NC} = ($pull) Needs Pull"

    echo
}

# Function to execute actions on a single repository
execute_action() {
    local index=$1
    local dir=${REPOS[$index]}
    local original_dir
    local processed=0
    original_dir=$(pwd)

    cd "$dir" || return

    clear
    printf "Updating %s...\n\n" "$dir"
    
    if [[ ${NEEDS_COMMIT[$index]} -eq 1 ]]; then
        clear
        echo "Showing Status:"
        echo
        git status --porcelain
        echo
        read -r -p "Press any key to show diff..."
        git diff HEAD

        read -r -p "Do you want to Auto Commit changes? (y/N): " confirm

        if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
            printf "%bAuto Committing changes...%b" "$YELLOW" "$NC"
            git add .
            git commit -m "Automated commit from git-reckd [https://github.com/CodexHere/git-reckd]"

            NEEDS_PUSH["$index"]=1
            processed=1
        else
            printf "%bSkipping Auto Commit.%b\n\n" "$YELLOW" "$NC"
        fi
    fi

    if [[ ${NEEDS_PUSH[$index]} -eq 1 ]]; then
        echo "Pushing changes..."
        git push origin
        processed=1
    fi

    if [[ ${NEEDS_PULL[$index]} -eq 1 ]]; then
        echo "Pulling changes..."
        git pull origin
        processed=1
    fi

    if [[ "$processed" -eq 0 ]]; then
        echo "No Updating Needed!"
    fi

    cd "$original_dir" || return
}

# Main menu
main_menu() {
    while true; do
        display_status
        echo "Options:"
        echo "  1. Update specific repository"
        echo "  2. Update all repositories"
        echo "  3. Refresh status"
        echo "  4. Exit"
        echo
        read -r -p "Select an option [1-4]: " choice

        case $choice in
            1)
                read -r -p "Enter repository number [1-$((${#REPOS[@]}))]: " repo_num
                if [[ $repo_num =~ ^[0-9]+$ && $repo_num -gt 0 && $repo_num -le ${#REPOS[@]} ]]; then
                    execute_action "$((repo_num - 1))"
                    printf "\n\nPress Enter to continue..."
                    read -r
                    update_repo_status
                else
                    echo "Invalid repository number"
                    sleep 2
                fi
                ;;
            2)
                for i in "${!REPOS[@]}"; do
                    execute_action "$i"
                done
                printf "\n\nPress Enter to continue..."
                read -r
                update_repo_status
                ;;
            3)
                update_repo_status
                ;;
            4)
                exit 0
                ;;
            *)
                echo "Invalid option"
                sleep 2
                ;;
        esac
    done
}

update_repo_status() {
    clear
    printf "%bScanning %b(%s)%b for repos...%b\n" "$YELLOW" "$NC" "$SEARCH_PATH" "$YELLOW" "$NC"

    local _repos
    REPOS=()
    NEEDS_COMMIT=()
    NEEDS_PUSH=()
    NEEDS_PULL=()

    _repos=$(find_repos)

    if [ -z "$_repos" ]; then
        echo "No git repositories found."
        exit 1
    fi

    # Process repositories
    for repo in $_repos; do
        check_git_status "$repo"
    done
}

# Main execution
update_repo_status

main_menu
